#!/usr/bin/env python

# Run script of the qsvm training. See the main file for more details
# on how it works.

import argparse
import sys
import json

sys.path.append("..")

from qsvm.main import main


parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument(
    "--data_folder",
    type=str,
    default="../../data/ae_input/",
    help="The folder where the data is stored on the system.",
)
parser.add_argument(
    "--norm",
    type=str,
    default="minmax",
    help="The name of the normalisation that you'll to use.",
)
parser.add_argument(
    "--nevents",
    type=str,
    default="7.20e+05",
    help="The number of events of the norm file.",
)
parser.add_argument(
    "--model_path", type=str, required=True, help="The path to the Auto-Encoder model."
)
parser.add_argument(
    "--backend_name",
    type=str,
    help="The IBM backend. Could be a simulator"
    ", noise model, or a real quantum computer",
)
parser.add_argument(
    "--run_type",
    type=str,
    required=True,
    choices=["ideal", "noisy", "hardware"],
    help="Choose way to run the QSVM: Ideal computation,"
    "noisy simulation or on real quantum hardware.",
)
parser.add_argument(
    "--output_folder", required=True, help="The name of the model to be saved."
)
parser.add_argument(
    "--c_param", type=float, default=1.0, help="The C parameter of the SVM."
)
parser.add_argument(
    "--ntrain", type=int, default=600, help="Number of training events for the QSVM."
)
parser.add_argument(
    "--nvalid",
    type=int,
    default=0,
    help="Number of validation events for the QSVM (typically)"
    "not used for the QSVM).",
)
parser.add_argument(
    "--ntest", type=int, default=720, help="Number of test events for the QSVM."
)

args = parser.parse_args()

# Load private configuration file for ibmq_api_token and provider details.
try:
    with open("private_config_vasilis.json") as pconfig:
        private_configuration = json.load(pconfig)
except:
    print("Error in reading private config: Process aborted")

# Different configuration keyword arguments for the QuantumInstance depending
# on the run_type. They can be tweaked as desired before running.
initial_layout = [22, 25, 24, 23, 21, 18, 15, 12]  # for Cairo

seed = 12345
config_noisy = {
    "optimization_level": 3,
    "initial_layout": initial_layout,
    "seed_transpiler": seed,
    "seed_simulator": seed,
    "shots": 5000,
}
config_hardware = {
    "optimization_level": 3,
    "initial_layout": initial_layout,
    "seed_transpiler": seed,
    "shots": 5000,
}
config_ideal = {"seed_simulator": seed}

switcher = {
    "ideal": lambda: config_ideal,
    "noisy": lambda: config_noisy,
    "hardware": lambda: config_hardware,
}
config = switcher.get(args.run_type, lambda: None)()

args = {
    "feature_dim": 16,
    "data_folder": args.data_folder,
    "norm": args.norm,
    "nevents": args.nevents,
    "model_path": args.model_path,
    "c_param": args.c_param,
    "output_folder": args.output_folder,
    "backend_name": args.backend_name,
    "ibmq_api_config": private_configuration["IBMQ"],
    "run_type": args.run_type,
    "config": config,
    "ntrain": args.ntrain,
    "nvalid": args.nvalid,
    "ntest": args.ntest,
    "seed": seed,  # For the data shuffling.
}

main(args)
