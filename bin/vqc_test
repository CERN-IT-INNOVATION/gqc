#!/usr/bin/env python

import argparse
import sys
import json

sys.path.append("..")

from vqc_pennylane.test import main
parser = argparse.ArgumentParser(formatter_class=argparse.
                                 ArgumentDefaultsHelpFormatter)
parser.add_argument("--data_folder", type=str, default='../../data/ae_input/',
                    help="The folder where the data is stored on the system.")
parser.add_argument("--norm", type=str, default='minmax',
                    help="The name of the normalisation that you'll to use.")
parser.add_argument("--nevents", type=str, default='7.20e+05',
                    help="The number of events of the norm file.")
parser.add_argument('--ae_model_path', type=str,
                    help="The path to the Auto-Encoder model.")
parser.add_argument('--vqc_path', type=str,
                    help="The path to the vqc model.")
parser.add_argument('--ntest', type=int, default=250,
                    help='Number of test events for the VQC.')
parser.add_argument('--nvalid', type=int, default=250,
                    help='Number of validation events for the VQC.')
parser.add_argument('--backend_name', type=str,
                    help='The IBMQ backend used for either an ideal simulation or'
                         'or a real quantum hardware run.')
parser.add_argument('--run_type', type=str, required=True,
                    choices=['ideal', 'noisy', 'hardware'],
                    help='Choose way to run the (hybrid) VQC training: Ideal '
                         'computation, noisy simulation or on real quantum hardware.')
args = parser.parse_args()

initial_layout = [22,25,24,23,21,18,15,12] # for Cairo
seed = 12345 
# Load private configuration file for ibmq_api_token and provider details.
try:
    with open('private_config_vasilis.json') as pconfig:
        private_configuration = json.load(pconfig)
except:
    print("Error in reading private config: Process aborted")

config_ideal = {"name": "default.qubit.autograd", "shots": None,} 
config_noisy = {
    "backend_config": {"shots": 5000, 
                       "optimization_level": 3, "transpiler_seed": seed, 
                       "initial_layout": initial_layout, "seed_simulator": seed,},
    "ibmq_api": private_configuration["IBMQ"],
}
config_hardware = {
    "backend_config": {"shots": 5000, 
                       "optimization_level": 3, "transpiler_seed": seed, 
                       "initial_layout": initial_layout,
    },
    "ibmq_api": private_configuration["IBMQ"],
}
switcher = {'ideal' : lambda: config_ideal, 'noisy' : lambda: config_noisy, 
            'hardware' : lambda: config_hardware}
config = switcher.get(args.run_type, lambda: None)()

args = {
    "data_folder": args.data_folder,
    "norm": args.norm,
    "nevents": args.nevents,
    "ae_model_path": args.ae_model_path,
    "vqc_path": args.vqc_path,
    "test_events": args.ntest,
    "valid_events": args.nvalid,
    "seed": seed,
    "run_type": args.run_type,
    "backend_name": args.backend_name,
    "config": config,
}

main(args)
